타입스크립트
앵귤러 선수 들어야함
rxjs 설치
npm install rxjs

1초에 한번씩 클릭되게 함
----
ngOnInit(){
  let button  = document.querySelector('button');
  button.addEventListener('click', () => console.log("YO,bro, clicked me!"))
  let count : number = 0;
  let rate : number = 1000; // 1초
  let lastClick: number = Date,now() - rate;
  let button = document.querySelector('button');
  button.addEventListener('click',()=>{
    if(Date.now() - lastClick >= rate){
      console.log(count++);
      lastClick = Date.now();
    }
  })
}
==>
observable(가긴갈껀데 언제갈지 모름 기다려야함) 으로 치환 가능
그 다음 수행하는 메소드는 subscribe
메소드 사용할때마다 필요한거만 아래처럼 가져다씀 -> 다가져와도 되는데 무거워짐
겁나 짧아짐
import 'rxjs/add/observable/fromEvent';
import 'rxjs/add/operator/throttleTime;

ngOnInit(){
  Observable.fromEvent(button, 'click')
    .throttleTime(1000)
    .subscribe(
      (event) => console.log(event)
    )
}
----

Observable (Data Provider)(데이터 제공하는 Object)
<-> Observer(Subscriber)(데이터 받는 Object)

m:m 관계

Observer는 3개의 function 필요
next()  / error() / complete()
next()를 통해서 새로운 정보를 Observable이 전달(Observer인 user가 아니라 특정 사이트등의 Observable이 행동 호출)
subscribe()를 호출

---1
ngOnInit(){
  // observer는 아래 3가지 펑션 있어야함
  let observer = {
    next: function(value){
      console.log(value);
    },
    error:function(error){
      console.l,og(error);
    },
    complete: function(){
      console.log('Finished');
    }
  }
  let button = document.querySelector('button');
  // Observable
  // Observable.fromEvent(button, 'click')
  // functional declaration
  // 무조건 자동으로 실행
  Observable.create(function(obj){
    // 자동으로 호출
    // 동기는 동기 대로 비동기는 비동기 대로 호출
    obs.next('some value1');
    setTimeout(function(){
      obs.next('some value2');
      obs.error('some error');
    },2000)
    obs.complete('finished');

    button.onclick = function(){
      obs.next(event);
    }
  })
    .subscribe(
      //  Observer : Function or object
      // (event) => console.log("Clicked")
      observer
    )
}

---2
import 'rxjs/add/observable/interval;
import 'rxjs/add/operator/map;
import 'rxjs/add/operator/throttleTime;

ngOnInit(){
  // observer는 아래 3가지 펑션 있어야함
  let observer = {
    next: function(value){
      console.log(value);
    },
    error:function(error){
      console.l,og(error);
    },
    complete: function(){
      console.log('Finished');
    }
  }
  let button = document.querySelector('button');
  // 매초 표시
  Observable.interval(1000).subscribe(observer){
  }

  Observable.interval(1000).map(function(value){
    return value*2;
  })
  .throttleTime(2000)
  .subscribe(observer)
}

throttleTime을 통해 데이터 날림
즉 중간단계를 거치면서 데이터 전달 사라지고 원하는 데이터 혹은 조건에 맞는 데이터만 살아남을 수 있음
Observable.a1b2.a2b3.subscribe(b4);

---3
import {Subject} from 'rxjs/Subject';
export class RxjsTurorialComponent implements OnInit{
  mySubscription: any;
  onStart(){
    // observer는 아래 3가지 펑션 있어야함
    let observer = {
      next: function(value){
        console.log(value);
      },
      error:function(error){
        console.l,og(error);
      },
      complete: function(){
        console.log('Finished');
      }
    }
    let button = document.querySelector('button');
    // 매초 표시
    Observable.interval(1000).subscribe(observer){
    }
    // 참이면 통과 거짓이면 안통과 -> 필터
    this.mySubscripttion = Observable.interval(1000).filter(function(value){
      return value%2 ==0;
    })
    .subscribe(observer)

    //this.mySubscription()
  }

  onStop(){
    this.mysubscription.unsubscribe();
  }


  onSubject(){
    let subject = new Subject();
    subject.subscribe({
      next: function(value){
        console.log(value);
      },
      error:function(error){
        console.log(error);
      },
      complete: function(){
        console.log('Finished');
      }
    });
    subject.next('Data requested');
  }
  // debounceTime : 시간 지난뒤 작동
  //
  onInput(event){
    Observable.fromEvent(event.target,'input')
    .pluck('target', 'value')
    .debounceTime(300)
    .distinctUntilChanged()
    .subscribe({
      next: function(){
        console.log(event.target.value)
      }
    })
  }
  // reduce : 각단계별로 변화하는 값 사용 편함 / scan
  onReduce(){
    Observable.of(1,2,3,4,5)
      .reduce((total, currentValue) => {
        return total + currentValue;
      }, 0)
      .subscribe({
        next: function(value){
          console.log(value);
        }
      })
  }
  onClick(){
    let obs1: Observable<number> = Observable.create(obs => obs.next())
    let obs2: Observable<number> = Observable.interval(1000);

    obs1.subscribe(
      e => {
        //  Using another Observable, obs2
        obs2.subscribe(
          (value) => console.log(value))
          // (value) => {event => obs3.subscribe()}
    }
  }
}

// 원래는 this.mySubscription() 이런식으로 해야 동작하는데 없어도 이미 start가 유지되어 작동됨
// filter
---4
tutorial.js

const button = document.querySelector('button');

function logClick(x) {
  console.log('clicked! ${x.x}');
  const arr = [10,20,30,40,50,60];
  arr.forEach((x) => {
    console.log(x);
  });

}

---5
const res = fetch(
  'http://jsonplaceholder.typicode.com/users'
).then(res => res.json());
)

function successCallback(value){
  console.log('we got back ${value}');
}

function failureCallback(value){
  console.log(':( ${err}');
};
res.then(successCallback, failureCallback);

---6
const readable = getReadableStreamSomehow();

function nextDataCallback(chunk){
  console.log('Received ${chunk.length} byes of code');
};

function errorDataCallback(err){
  console.log('Bad stuff happened: ${error}');
}

function doneDataCallback(){
  console.log('There will be no more data');
}

readable.on('data', nextDataCallback);
readable.on('error', errorDataCallback);
readable.on('end', doneDataCallback);

==>
function nextCallback(data){
  console.log('we received ${data.length} bytes of data');
}

function errorDataCallback(err){
  console.log('Bad stuff happened: ${error}');
}

function doneDataCallback(){
  console.log('finished!');
}

function giveMeSomeData(nextcb, errorcb, completecb){
  [10,20,30].forEach(nextCB);
}
giveMeSomeData(
  nextCallback,
  errorCallback,
  completeCallback
);
--> 7
const observer ={

  next : function(data){
    console.log(data);
  },
  error: function(data){
    console.log(error);
  },
  complete: function(){
    console.log('finished');
  }

  const observable = {
    subscribe: function(ob){
      [10,20,30].forEach(x => ob.next(x));
    }
  }
  observable.subscribe(observer)
}
---8
function map(transformFn){
  const inputObservable = this;
  const outputObservable = createObservable(function(outputObserver){
    inputObservable.subscribe({
      next: function(){
        const y = transformFn(x); // 20 --> 2
        outputObserver.next(y); // 2
      },
      error : e => outputObserver.error(e),
      complete: () => outputObserver.complete('finished')
    })
  })
  return outputObservable;
}
const createObservable = function(subscribe){
    return {
      subscribe: sub,
      map: map
    }
}

const observer = {
  next: data => console.log(data),
  next: error => console.log(error),
  complete: ()) => console.log('finished')
}

const arrayObservable = createObservable(function(ob){
    [10, 20, 30].forEach(ob.next);
});
console.log(arrayObservable.subscribe(observer));

const clickObservable = createObservable(function(ob){
    document.addEventListener('click', ob.next)
});

console.log(arrayObservable
  .map(x => x*10)
  .subscribe(observer));
observable
  .map(x=>x/10)
  .filter(x => x%2 ===0)
  .subscribe(observer)

---9
filter function


function map(transformFn){
  const inputObservable = this;
  const outputObservable = createObservable(function(outputObserver){
    inputObservable.subscribe({
      next: function(){
        const y = transformFn(x); // 20 --> 2
        outputObserver.next(y); // 2
      },
      error : e => outputObserver.error(e),
      complete: () => outputObserver.complete('finished')
    })
  })
  return outputObservable;
}
const createObservable = function(subscribe){
    return {
      subscribe: sub,
      map: map,
      filter: filter
    }
}

function filter(conditionFn){
  const inputObservable = this;
  const outputObservable = createObservable(function(outputObserver){
    inputObservable.subscribe({
      next: function(){
        if(conditionFn(x)){
          outputObserver.next(x);
        }
      },
      error : e => outputObserver.error(e),
      complete: () => outputObserver.complete('finished')
    })
  })
  return outputObservable;
}
const createObservable = function(subscribe){
    return {
      subscribe: sub,
      map: map
    }
}

const observer = {
  next: data => console.log(data),
  next: error => console.log(error),
  complete: ()) => console.log('finished')
}

const arrayObservable = createObservable(function(ob){
    [10, 20, 30].forEach(ob.next);
});
console.log(arrayObservable.subscribe(observer));

const clickObservable = createObservable(function(ob){
    document.addEventListener('click', ob.next)
});

console.log(arrayObservable
  .map(x => x*10)
  .filter(x => x%3 !==0)
  .subscribe(observer));

observable
  .map(x=>x/10)
  .filter(x => x%2 ===0)
  .subscribe(observer)
